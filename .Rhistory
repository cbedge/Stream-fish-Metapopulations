unique(nodefile$ID)[4]
paths <- all_simple_paths(graph=graphfile, from=k, mode = "all") #returns path from a segment to all other segements
start <- sapply(paths, "[[", 1) #Identify the starting segment
end <- sapply(paths, tail, 1) #Identify the final segment
p.length <- NULL
pass <- NULL
for (j in 1:(length(unique(nodefile$ID))-1)) {
p.length2 <- 0
pass2 <- 1
for (c in paths[[j]]) {
i <- unique(nodefile$ID)[c]
p.length2 <- p.length2 + nodefile$Area[i] #length of the path
pass2 <- pass2 * (nodefile$PermUS[i] * nodefile$PermDS[i])
}
p.length <- c(p.length, p.length2)
pass <- c(pass, pass2)
}
all.paths2 <- data.frame(start, end, p.length, pass)
itself <- c(k, k, nodefile$Area[k], nodefile$PermUS[k] * nodefile$PermUS[k])
all.paths <- rbind(all.paths, all.paths2, itself)
unique(nodefile$ID)[5]
k <-214
k <-213
paths <- all_simple_paths(graph=graphfile, from=k, mode = "all") #returns path from a segment to all other segements
start <- sapply(paths, "[[", 1) #Identify the starting segment
end <- sapply(paths, tail, 1) #Identify the final segment
p.length <- NULL
pass <- NULL
for (j in 1:(length(unique(nodefile$ID))-1)) {
p.length2 <- 0
pass2 <- 1
for (c in paths[[j]]) {
i <- unique(nodefile$ID)[c]
p.length2 <- p.length2 + nodefile$Area[i] #length of the path
pass2 <- pass2 * (nodefile$PermUS[i] * nodefile$PermDS[i])
}
p.length <- c(p.length, p.length2)
pass <- c(pass, pass2)
}
all.paths2 <- data.frame(start, end, p.length, pass)
itself <- c(k, k, nodefile$Area[k], nodefile$PermUS[k] * nodefile$PermUS[k])
all.paths <- rbind(all.paths, all.paths2, itself)
unique(nodefile$ID)[6]
k <-91
paths <- all_simple_paths(graph=graphfile, from=k, mode = "all") #returns path from a segment to all other segements
start <- sapply(paths, "[[", 1) #Identify the starting segment
end <- sapply(paths, tail, 1) #Identify the final segment
p.length <- NULL
pass <- NULL
for (j in 1:(length(unique(nodefile$ID))-1)) {
p.length2 <- 0
pass2 <- 1
for (c in paths[[j]]) {
i <- unique(nodefile$ID)[c]
p.length2 <- p.length2 + nodefile$Area[i] #length of the path
pass2 <- pass2 * (nodefile$PermUS[i] * nodefile$PermDS[i])
}
p.length <- c(p.length, p.length2)
pass <- c(pass, pass2)
}
all.paths2 <- data.frame(start, end, p.length, pass)
itself <- c(k, k, nodefile$Area[k], nodefile$PermUS[k] * nodefile$PermUS[k])
all.paths <- rbind(all.paths, all.paths2, itself)
k <-unique(nodefile$ID)[7]
paths <- all_simple_paths(graph=graphfile, from=k, mode = "all") #returns path from a segment to all other segements
start <- sapply(paths, "[[", 1) #Identify the starting segment
end <- sapply(paths, tail, 1) #Identify the final segment
p.length <- NULL
pass <- NULL
for (j in 1:(length(unique(nodefile$ID))-1)) {
p.length2 <- 0
pass2 <- 1
for (c in paths[[j]]) {
i <- unique(nodefile$ID)[c]
p.length2 <- p.length2 + nodefile$Area[i] #length of the path
pass2 <- pass2 * (nodefile$PermUS[i] * nodefile$PermDS[i])
}
p.length <- c(p.length, p.length2)
pass <- c(pass, pass2)
}
all.paths2 <- data.frame(start, end, p.length, pass)
itself <- c(k, k, nodefile$Area[k], nodefile$PermUS[k] * nodefile$PermUS[k])
all.paths <- rbind(all.paths, all.paths2, itself)
k <-unique(nodefile$ID)[8]
paths <- all_simple_paths(graph=graphfile, from=k, mode = "all") #returns path from a segment to all other segements
start <- sapply(paths, "[[", 1) #Identify the starting segment
end <- sapply(paths, tail, 1) #Identify the final segment
p.length <- NULL
pass <- NULL
for (j in 1:(length(unique(nodefile$ID))-1)) {
p.length2 <- 0
pass2 <- 1
for (c in paths[[j]]) {
i <- unique(nodefile$ID)[c]
p.length2 <- p.length2 + nodefile$Area[i] #length of the path
pass2 <- pass2 * (nodefile$PermUS[i] * nodefile$PermDS[i])
}
p.length <- c(p.length, p.length2)
pass <- c(pass, pass2)
}
all.paths2 <- data.frame(start, end, p.length, pass)
itself <- c(k, k, nodefile$Area[k], nodefile$PermUS[k] * nodefile$PermUS[k])
all.paths <- rbind(all.paths, all.paths2, itself)
k <-unique(nodefile$ID)[9]
paths <- all_simple_paths(graph=graphfile, from=k, mode = "all") #returns path from a segment to all other segements
start <- sapply(paths, "[[", 1) #Identify the starting segment
end <- sapply(paths, tail, 1) #Identify the final segment
p.length <- NULL
pass <- NULL
for (j in 1:(length(unique(nodefile$ID))-1)) {
p.length2 <- 0
pass2 <- 1
for (c in paths[[j]]) {
i <- unique(nodefile$ID)[c]
p.length2 <- p.length2 + nodefile$Area[i] #length of the path
pass2 <- pass2 * (nodefile$PermUS[i] * nodefile$PermDS[i])
}
p.length <- c(p.length, p.length2)
pass <- c(pass, pass2)
}
all.paths2 <- data.frame(start, end, p.length, pass)
itself <- c(k, k, nodefile$Area[k], nodefile$PermUS[k] * nodefile$PermUS[k])
all.paths <- rbind(all.paths, all.paths2, itself)
all.paths
View(all.paths)
View(Nodes)
View(all.paths)
shortest.paths(High.g, 217, 11)
get.all.shortest.paths(High.g, 217, 11)
all_simple_paths(graph=High.g, from=217, to = 11, mode = "all")
all_simple_paths(graph=High.g, from=218, to = 11, mode = "all")
V(High.g)$color<-ifelse(V(High.g)$ID==158, 'blue', 'red') #useful for highlighting certain people. Works by matching the name attribute of the vertex to the one specified in the 'ifelse' expression
plot(High.g, layout=layout.reingold.tilford, vertex.size=2, vertex.label.cex=0.5, vertex.label.dist=0.2, vertex.color="red", edge.arrow.size=0.1) #plot graph
E(High.g)$color<-ifelse(E(High.g)$ID==158, "blue", "red")
plot(High.g, layout=layout.reingold.tilford, vertex.size=2, vertex.label.cex=0.5, vertex.label.dist=0.2, vertex.color="red", edge.arrow.size=0.1) #plot graph
V(High.g)$color<-ifelse(158, 'blue', 'red') #useful for highlighting certain people. Works by matching the name attribute of the vertex to the one specified in the 'ifelse' expression
plot(High.g, layout=layout.reingold.tilford, vertex.size=2, vertex.label.cex=0.5, vertex.label.dist=0.2, vertex.color="red", edge.arrow.size=0.1) #plot graph
E(High.g)$color<-ifelse(158, "blue", "red")
plot(High.g, layout=layout.reingold.tilford, vertex.size=2, vertex.label.cex=0.5, vertex.label.dist=0.2, vertex.color="red", edge.arrow.size=0.1) #plot graph
V(High.g)$color<-ifelse(V(High.g)$ID==158, 'blue', 'red') #useful for highlighting certain people. Works by matching the name attribute of the vertex to the one specified in the 'ifelse' expression
V(High.g)$color<-ifelse(V(High.g)$ID==158, 'blue', 'red') #useful for highlighting certain people. Works by matching the name attribute of the vertex to the one specified in the 'ifelse' expression
V(High.g2)$color<-ifelse(V(High.g2)$ID==158, 'blue', 'red') #useful for highlighting certain people. Works by matching the name attribute of the vertex to the one specified in the 'ifelse' expression
plot(High.g2, layout=layout.reingold.tilford, vertex.size=2, vertex.label.cex=0.5, vertex.label.dist=0.2, edge.arrow.size=0.1) #plot graph
E(High.g2)$color<-ifelse(E(High.g2)$ID==158, "blue", "red")
plot(High.g2, layout=layout.reingold.tilford, vertex.size=2, vertex.label.cex=0.5, vertex.label.dist=0.2, edge.arrow.size=0.1) #plot graph
V(High.g)$color<-ifelse(158, 'blue', 'red') #useful for highlighting certain people. Works by matching the name attribute of the vertex to the one specified in the 'ifelse' expression
plot(High.g, layout=layout.reingold.tilford, vertex.size=2, vertex.label.cex=0.5, vertex.label.dist=0.2, edge.arrow.size=0.1) #plot graph
E(High.g2)$color<-ifelse(158, "blue", "red")
plot(High.g, layout=layout.reingold.tilford, vertex.size=2, vertex.label.cex=0.5, vertex.label.dist=0.2, edge.arrow.size=0.1) #plot graph
plot(High.g, layout=layout.reingold.tilford, vertex.size=2, vertex.label.cex=0.5, vertex.label.dist=0.2, vertex.color="red", edge.arrow.size=0.1) #plot graph
plot(High.g, layout=layout.reingold.tilford, vertex.size=2, vertex.label.cex=0.5, vertex.label.dist=0.2, vertex.color="red", edge.arrow.size=0.1) #plot graph
all_simple_paths(graph=High.g, from=217, to = 11, mode = "all")
all_simple_paths(graph=High.g, from=217, to = 10, mode = "all")
View(Nodes)
Nodes
View(HighEdge)
plot(High.g, layout=layout.reingold.tilford, vertex.size=2, vertex.label.cex=0.5, vertex.label.dist=0.3, vertex.color="red", edge.arrow.size=0.1) #plot graph
all_simple_paths(graph=High.g, from=216, to = 10, mode = "all")
all_simple_paths(graph=High.g, from=216, to = 11, mode = "all")
all_simple_paths(graph=High.g, from=212, to = 11, mode = "all")
all_simple_paths(graph=High.g, from=10, to = 11, mode = "all")
all_simple_paths(graph=High.g, from = 217, to = 10, mode = "all")
all_simple_paths(graph=High.g, from = 217, to = 214, mode = "all")
jpeg(file = "high.jpeg")
plot(High.g, layout=layout.reingold.tilford, vertex.size=2, vertex.label.cex=0.5, vertex.label.dist=0.3, vertex.color="red", edge.arrow.size=0.1) #plot graph
dev.off()
jpeg(file = "high.jpeg", width=20, height=20, units=cm)
jpeg(file = "high.jpeg", width=20, height=20, units="cm")
jpeg(file = "high.jpeg", width=20, height=20, units="cm", res=600)
plot(High.g, layout=layout.reingold.tilford, vertex.size=2, vertex.label.cex=0.5, vertex.label.dist=0.3, vertex.color="red", edge.arrow.size=0.1) #plot graph
dev.off()
plot(High.g, layout=layout.reingold.tilford, vertex.size=2, vertex.label.cex=0.5, vertex.label.dist=0.2, vertex.color="red", edge.arrow.size=0.1) #plot graph
jpeg(file = "high.jpeg", width=20, height=20, units="cm", res=600)
plot(High.g, layout=layout.reingold.tilford, vertex.size=2, vertex.label.cex=0.5, vertex.label.dist=0.2, vertex.color="red", edge.arrow.size=0.1) #plot graph
dev.off()
High.g2 <- graph.data.frame(HighEdge, vertices = Nodes, directed=TRUE)
plot(High.g2, layout=layout.reingold.tilford, vertex.size=2, vertex.label.cex=0.5, vertex.label.dist=0.2, vertex.color="red", edge.arrow.size=0.1) #plot graph
jpeg(file = "high.jpeg", width=20, height=20, units="cm", res=600)
plot(High.g2, layout=layout.reingold.tilford, vertex.size=2, vertex.label.cex=0.5, vertex.label.dist=0.2, vertex.color="red", edge.arrow.size=0.1) #plot graph
dev.off()
jpeg(file = "high.jpeg", width=30, height=20, units="cm", res=600)
plot(High.g2, layout=layout.reingold.tilford, vertex.size=2, vertex.label.cex=0.5, vertex.label.dist=0.2, vertex.color="red", edge.arrow.size=0.1) #plot graph
dev.off()
DCI.calc(nodefile = Nodes, graphfile = High.g2, mouth=158)
jpeg(file = "high.jpeg", width=20, height=30, units="cm", res=600)
plot(High.g2, layout=layout.reingold.tilford, vertex.size=2, vertex.label.cex=0.5, vertex.label.dist=0.2, vertex.color="red", edge.arrow.size=0.1) #plot graph
dev.off()
network <- function(n,tmax){					#Function to create random adjacency matrix
A <- matrix(0,nrow=n,ncol=n)				#Create an empty adjacency matrix
ntemp <- n						#Reset counter for the number of nodes
ttemp <- tmax						#Reset counter for the number of tributary junctions to insert
t <- 0							#Reset counter for the realized number of tributary junctions
for (j in 1:n){
split <- ifelse(round(runif(1,0,1),0)==1,1,0)
for (i in 1:n){
if(j>=i){A[i,j] <- 0}			#Generate upstream connectivity using only the "bottom" of the matrix
else{
A[i,j] <- ifelse(i==j+1,1,ifelse(ttemp>0,split,0))
}
if(sum(A[i,])>1){A[i,j] <- 0}		#Prevent network crossing
if(sum(A[,j])>2){A[i,j] <- 0}		#Prevent more than one split at a node
if(i>j+1){ttemp <- ttemp - A[i,j]}	#Reduce the available number of junctions left
ntemp <- ntemp - A[i,j]			#Reduce the available number of nodes left
}
t <- ifelse(sum(A[,j])==2,t+1,t)
}
A							#Send outputs
}
Aplot <- network(50,10) #create adjacency matrix for a  network
g <- graph.adjacency(t(Aplot), mode="directed")	#Convert adjacency matrix to a graph object
plot(g, layout=layout.reingold.tilford, vertex.size=4, vertex.label.dist=0.5, vertex.color="red", edge.arrow.size=0.5) #plot graph
ID <- 1:50
Area <- c(0, sample(10:100, 49, replace=T)) #Area of each segment (downstream length in a riverscape). Area of first segment is set as 0 because it is mouth
Qual <- c(100, sample(0:100, 49, replace=T)) #Relative quality of segment where 100 is high and 0 is low. Quality of first segment is set at 100 because it is mouth
PermDS <- rep(1, 50) #assigning a permeability to move downstream into segment
PermUS <- rep(1, 50) #Assigning a permeability to move upstream out of segment
ASurv <- rep(1, 50) #Assigning Adult survival in each node
JSurv <- rep(1, 50) #Assigning Larval survival in each node
AFec <- rep(10, 50) #Assigning adult fecundity in each node
nodes <- data.frame(ID, Area, Qual, PermDS, PermUS, ASurv, JSurv, AFec) #create a dataframe with the variables for each node
nodefile <- nodes
graphfile <- g
all.paths <- NULL
k <-unique(nodefile$ID)[1]
k
paths <- all_simple_paths(graph=graphfile, from=k, mode = "all") #returns path from a segment to all other segements
start <- sapply(paths, "[[", 1) #Identify the starting segment
end <- sapply(paths, tail, 1) #Identify the final segment
p.length <- NULL
pass <- NULL
for (j in 1:(length(unique(nodefile$ID))-1)) {
p.length2 <- 0
pass2 <- 1
for (c in paths[[j]]) {
i <- unique(nodefile$ID)[c]
p.length2 <- p.length2 + nodefile$Area[i] #length of the path
pass2 <- pass2 * (nodefile$PermUS[i] * nodefile$PermDS[i])
}
p.length <- c(p.length, p.length2)
pass <- c(pass, pass2)
}
all.paths2 <- data.frame(start, end, p.length, pass)
itself <- c(k, k, nodefile$Area[k], nodefile$PermUS[k] * nodefile$PermUS[k])
all.paths <- rbind(all.paths, all.paths2, itself)
all.paths
jpeg(file = "high.jpeg", width=20, height=30, units="cm", res=600)
plot(High.g, layout=layout.reingold.tilford, vertex.size=2, vertex.label.cex=0.5, vertex.label.dist=0.2, vertex.color="red", edge.arrow.size=0.1) #plot graph
dev.off()
jpeg(file = "high.jpeg", width=20, height=20, units="cm", res=600)
plot(High.g, layout=layout.reingold.tilford, vertex.size=2, vertex.label.cex=0.5, vertex.label.dist=0.2, vertex.color="red", edge.arrow.size=0.1) #plot graph
dev.off()
all_simple_paths(graph=High.g, from = 217, to = 212, mode = "all")
all_simple_paths(graph=High.g, from = 180, to = 212, mode = "all")
all_simple_paths(graph=High.g, from = 180, to = 212, mode = "from")
all_simple_paths(graph=High.g, from = 180, to = 212, mode = "out)
all_simple_paths(graph=High.g, from = 180, to = 212, mode = "out")
Aplot
View(HighEdge)
High.adj <- matrix(nrow=HighEdge, ncol=HighEdge) #creates matrix of edge weights read as row flows to col
HighEdge
High.adj <- matrix(nrow=255, ncol=255) #creates matrix of edge weights read as row flows to col
for (i in 1:p)
{
High.adj[HighEdge[i,1],HighEdge[i,2]] <- 1
}
High.adj <- matrix(nrow=255, ncol=255) #creates matrix of edge weights read as row flows to col
for (i in 1:nrow(High.adj))
{
High.adj[HighEdge[i,1],HighEdge[i,2]] <- 1
}
HighEdge[1,1]
High.adj[HighEdge[1,2],HighEdge[i,2]] <- 1
High.adj[HighEdge[2,1],HighEdge[i,2]] <- 1
HighEdge[2,1]
View(HighEdge)
High.adj <- matrix(nrow=255, ncol=255) #creates matrix of edge weights read as row flows to col
for (i in 1:nrow(High.adj))
{
High.adj[HighEdge[i,2],HighEdge[i,1]] <- 1
}
High.adj
HighEdge[1,2]
HighEdge[1,1]
High.adj <- matrix(nrow=255, ncol=255) #creates matrix of edge weights read as row flows to col
for (i in 1:255)
{
High.adj[HighEdge[i,2],HighEdge[i,1]] <- 1
}
HighEdge[255,1]
HighEdge[255,2]
High.adj[255,255]
High.adj <- matrix(nrow=260, ncol=260) #creates matrix of edge weights read as row flows to col
for (i in 1:255)
{
High.adj[HighEdge[i,2], HighEdge[i,1]] <- 1
}
High.adj
High.adj[255,255]
HighEdge[255,2]
High.adj[188,134]
High.adj <- matrix(0, nrow=260, ncol=260) #creates matrix of edge weights read as row flows to col
High.adj
View(HighEdge)
High.adj <- matrix(0, nrow=255, ncol=255) #creates matrix of edge weights read as row flows to col
for (i in 1:255)
{
High.adj[HighEdge[i,2], HighEdge[i,1]] <- 1
}
High.adj <- matrix(0, nrow=256, ncol=256) #creates matrix of edge weights read as row flows to col
for (i in 1:255)
{
High.adj[HighEdge[i,2], HighEdge[i,1]] <- 1
}
High.adj <- matrix(0, nrow=258, ncol=258) #creates matrix of edge weights read as row flows to col
for (i in 1:255)
{
High.adj[HighEdge[i,2], HighEdge[i,1]] <- 1
}
High.g3 <- graph.adjacency(t(High.adj), mode="directed")
plot(High.g3, layout=layout.reingold.tilford, vertex.size=2, vertex.label.cex=0.5, vertex.label.dist=0.2, vertex.color="red", edge.arrow.size=0.1) #plot graph
DCI.calc(nodefile = Nodes, graphfile = High.g3, mouth=158)
High.adj
High.adj2 <- High.adj[-30,-30]
High.g3 <- graph.adjacency(t(High.adj2), mode="directed")
plot(High.g3, layout=layout.reingold.tilford, vertex.size=2, vertex.label.cex=0.5, vertex.label.dist=0.2, vertex.color="red", edge.arrow.size=0.1) #plot graph
EdgeWBarID <- read.csv(file="data/StreamNodesAndEdges/High_EdgeList_corrected.csv", header=T)
HighEdge <- EdgeWBarID[,2:3]
View(HighEdge)
High.adj <- matrix(0, nrow=256, ncol=256) #creates matrix of edge weights read as row flows to col
for (i in 1:255)
{
High.adj[HighEdge[i,2], HighEdge[i,1]] <- 1
}
High.g3 <- graph.adjacency(t(High.adj2), mode="directed")
library(igraph)
High.g3 <- graph.adjacency(t(High.adj), mode="directed")
plot(High.g3, layout=layout.reingold.tilford, vertex.size=2, vertex.label.cex=0.5, vertex.label.dist=0.2, vertex.color="red", edge.arrow.size=0.1) #plot graph
Nodes <- read.csv(file="data/StreamNodesAndEdges/High_JunctDSSeg_corrected.csv", header=T)
Nodes.attr <- read.csv(file="data/StreamNodesAndEdges/HighSegs_corrected.csv", header=T)
names(Nodes)
colnames(Nodes) <- c("Junction", "ID")
Nodes$Area <- Nodes.attr$Shape_Length[match(Nodes$ID, Nodes.attr$OBJECTID)]
Nodes$Qual <- 100
Nodes$PermDS <- 1 #assigning a permeability to move downstream into segment
Nodes$PermUS <- 1 #Assigning a permeability to move upstream out of segment
Nodes$ASurv <- 1 #Assigning Adult survival in each node
Nodes$JSurv <- 1 #Assigning Larval survival in each node
Nodes$AFec <- 1
Nodes <- Nodes[,-1]
DCI.calc(nodefile = Nodes, graphfile = High.g3, mouth=158)
DCI.calc <- function(nodefile, graphfile, mouth){
#Construct a table with the start and end of each path between all segments, length of that path,
#the product of the permeabilites of barriers on that path, the length of the start segment, and the length of the last segment
all.paths <- NULL
for (b in 1:length(nodefile$ID)) {
k <- unique(nodefile$ID)[b]
paths <- all_simple_paths(graph=graphfile, from=k, mode = "all") #returns path from a segment to all other segements
start <- sapply(paths, "[[", 1) #Identify the starting segment
end <- sapply(paths, tail, 1) #Identify the final segment
p.length <- NULL
pass <- NULL
for (j in 1:(length(unique(nodefile$ID))-1)) {
p.length2 <- 0
pass2 <- 1
for (c in paths[[j]]) {
i <- unique(nodefile$ID)[c]
p.length2 <- p.length2 + nodefile$Area[i] #length of the path
pass2 <- pass2 * (nodefile$PermUS[i] * nodefile$PermDS[i])
}
p.length <- c(p.length, p.length2)
pass <- c(pass, pass2)
}
all.paths2 <- data.frame(start, end, p.length, pass)
itself <- c(k, k, nodefile$Area[k], nodefile$PermUS[k] * nodefile$PermUS[k])
all.paths <- rbind(all.paths, all.paths2, itself)
}
all.paths$Start.Length <- nodes$Area[match(all.paths$start, nodefile$ID)]
all.paths$End.Length <- nodes$Area[match(all.paths$end, nodefile$ID)]
#DCIp Calculation
tot.length <- sum(nodefile$Area)
DCIp <- 0
for (i in 1:nrow(all.paths)) {
DCIp <- DCIp + (all.paths$pass[i] * (all.paths$Start.Length[i]/tot.length) * (all.paths$End.Length[i]/tot.length))
}
#Calculate DCId
DCId <- 0
DCId.data <- all.paths[all.paths$end==mouth, ]
for (i in 1:nrow(DCId.data)){
DCId <- DCId + (DCId.data$pass[i] * (DCId.data$Start.Length[i]/tot.length))
}
DCI.results <- data.frame(DCIp, DCId)
colnames(DCI.results) <- c("DCIp", "DCId")
DCI.results
}
DCI.calc(nodefile = Nodes, graphfile = High.g3, mouth=158)
DCI.calc <- function(nodefile, graphfile, mouth){
#Construct a table with the start and end of each path between all segments, length of that path,
#the product of the permeabilites of barriers on that path, the length of the start segment, and the length of the last segment
all.paths <- NULL
for (b in 1:length(nodefile$ID)) {
k <- unique(nodefile$ID)[b]
paths <- all_simple_paths(graph=graphfile, from=k, mode = "all") #returns path from a segment to all other segements
start <- sapply(paths, "[[", 1) #Identify the starting segment
end <- sapply(paths, tail, 1) #Identify the final segment
p.length <- NULL
pass <- NULL
for (j in 1:(length(unique(nodefile$ID))-1)) {
p.length2 <- 0
pass2 <- 1
for (c in paths[[j]]) {
i <- unique(nodefile$ID)[c]
p.length2 <- p.length2 + nodefile$Area[i] #length of the path
pass2 <- pass2 * (nodefile$PermUS[i] * nodefile$PermDS[i])
}
p.length <- c(p.length, p.length2)
pass <- c(pass, pass2)
}
all.paths2 <- data.frame(start, end, p.length, pass)
itself <- c(k, k, nodefile$Area[k], nodefile$PermUS[k] * nodefile$PermUS[k])
all.paths <- rbind(all.paths, all.paths2, itself)
}
all.paths$Start.Length <- nodes$Area[match(all.paths$start, nodefile$ID)]
all.paths$End.Length <- nodes$Area[match(all.paths$end, nodefile$ID)]
#DCIp Calculation
tot.length <- sum(nodefile$Area)
DCIp <- 0
for (i in 1:nrow(all.paths)) {
DCIp <- DCIp + (all.paths$pass[i] * (all.paths$Start.Length[i]/tot.length) * (all.paths$End.Length[i]/tot.length))
}
#Calculate DCId
DCId <- 0
DCId.data <- all.paths[all.paths$end==mouth, ]
for (i in 1:nrow(DCId.data)){
DCId <- DCId + (DCId.data$pass[i] * (DCId.data$Start.Length[i]/tot.length))
}
DCI.results <- data.frame(DCIp, DCId)
colnames(DCI.results) <- c("DCIp", "DCId")
DCI.results
}
library(igraph)
EdgeWBarID <- read.csv(file="data/StreamNodesAndEdges/High_EdgeList_corrected.csv", header=T)
High.adj <- matrix(0, nrow=256, ncol=256) #creates matrix of edge weights read as row flows to col
for (i in 1:255)
{
High.adj[HighEdge[i,2], HighEdge[i,1]] <- 1
}
HighEdge <- EdgeWBarID[,2:3]
High.adj <- matrix(0, nrow=256, ncol=256) #creates matrix of edge weights read as row flows to col
for (i in 1:255)
{
High.adj[HighEdge[i,2], HighEdge[i,1]] <- 1
}
High.g3 <- graph.adjacency(t(High.adj), mode="directed")
plot(High.g3, layout=layout.reingold.tilford, vertex.size=2, vertex.label.cex=0.5, vertex.label.dist=0.2, vertex.color="red", edge.arrow.size=0.1) #plot graph
Nodes <- read.csv(file="data/StreamNodesAndEdges/High_JunctDSSeg_corrected.csv", header=T)
Nodes.attr <- read.csv(file="data/StreamNodesAndEdges/HighSegs_corrected.csv", header=T)
names(Nodes)
colnames(Nodes) <- c("Junction", "ID")
Nodes$Area <- Nodes.attr$Shape_Length[match(Nodes$ID, Nodes.attr$OBJECTID)]
Nodes$Qual <- 100
Nodes$PermDS <- 1 #assigning a permeability to move downstream into segment
Nodes$PermUS <- 1 #Assigning a permeability to move upstream out of segment
Nodes$ASurv <- 1 #Assigning Adult survival in each node
Nodes$JSurv <- 1 #Assigning Larval survival in each node
Nodes$AFec <- 1
Nodes <- Nodes[,-1]
DCI.calc(nodefile = Nodes, graphfile = High.g3, mouth=158)
DCI.calc <- function(nodefile, graphfile, mouth){
#Construct a table with the start and end of each path between all segments, length of that path,
#the product of the permeabilites of barriers on that path, the length of the start segment, and the length of the last segment
all.paths <- NULL
for (b in 1:length(nodefile$ID)) {
k <- unique(nodefile$ID)[b]
paths <- all_simple_paths(graph=graphfile, from=k, mode = "all") #returns path from a segment to all other segements
start <- sapply(paths, "[[", 1) #Identify the starting segment
end <- sapply(paths, tail, 1) #Identify the final segment
p.length <- NULL
pass <- NULL
for (j in 1:(length(unique(nodefile$ID))-1)) {
p.length2 <- 0
pass2 <- 1
for (c in paths[[j]]) {
i <- unique(nodefile$ID)[c]
p.length2 <- p.length2 + nodefile$Area[i] #length of the path
pass2 <- pass2 * (nodefile$PermUS[i] * nodefile$PermDS[i])
}
p.length <- c(p.length, p.length2)
pass <- c(pass, pass2)
}
all.paths2 <- data.frame(start, end, p.length, pass)
itself <- c(k, k, nodefile$Area[k], nodefile$PermUS[k] * nodefile$PermUS[k])
all.paths <- rbind(all.paths, all.paths2, itself)
}
all.paths$Start.Length <- nodefile$Area[match(all.paths$start, nodefile$ID)]
all.paths$End.Length <- nodefile$Area[match(all.paths$end, nodefile$ID)]
#DCIp Calculation
tot.length <- sum(nodefile$Area)
DCIp <- 0
for (i in 1:nrow(all.paths)) {
DCIp <- DCIp + (all.paths$pass[i] * (all.paths$Start.Length[i]/tot.length) * (all.paths$End.Length[i]/tot.length))
}
#Calculate DCId
DCId <- 0
DCId.data <- all.paths[all.paths$end==mouth, ]
for (i in 1:nrow(DCId.data)){
DCId <- DCId + (DCId.data$pass[i] * (DCId.data$Start.Length[i]/tot.length))
}
DCI.results <- data.frame(DCIp, DCId)
colnames(DCI.results) <- c("DCIp", "DCId")
DCI.results
}
DCI.calc(nodefile = Nodes, graphfile = High.g3, mouth=158)
